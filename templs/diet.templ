package templs

import (
    "strconv"
	"gonum.org/v1/gonum/unit"
    "github.com/Master-Mind/Excel-Replacement-Website/models"
    "fmt"
)

func calcBMR(person models.Person) float64 {
    return 88.362 + (13.397 * float64(person.Weight)) + (4.799 * float64(person.Height / unit.Centi)) - (5.677 * float64(person.Age))
}

templ FoodRecList(foodRecs []string) {
    <datalist id="food-recomendations">
        for _, food := range foodRecs {
            <option value={ food }></option>
        }
    </datalist>
}

templ FoodSearchBar(submission_endpoint string, swap_target string, swap string, button_text string) {
    <form hx-post={submission_endpoint} hx-target={swap_target} hx-swap={swap}>
        <label for="food-search">Search for food:</label>
        <input type="search" 
            id="food-search" 
            name="food-search" 
            list="food-recomendations" 
            placeholder="Enter food name..."
            hx-post="/recommend-food"
            hx-target="#food-recomendations"
            hx-trigger="keyup changed delay:100ms">
        <button type="submit">{button_text}</button>
    </form>
    @FoodRecList([]string{})
}

templ NutritionDisplay(nutMap map[string]models.Nutrient, nutAmounts map[int64]unit.Mass) {
    <table>
        <thead>
            <tr>
                <th>Nutrient</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
        for _, nut := range nutMap {
            if nutAmounts[nut.ID] > 0.0 {
                <tr>
                    <td>{ nut.Name }</td>
                    <td>{ models.FormatMass(nutAmounts[nut.ID]) }</td>
                </tr>
            }
        }
        </tbody>
    </table>
}

templ IngredientDisplay(ingredient models.Ingredient) {
    <li class="ingredient-inline">
        <input type="text" value={ models.FormatMass(ingredient.Amount) } 
            name="ingredient-amount" 
            hx-post={"/update-ingredient-amount?id=" + strconv.FormatInt(int64(ingredient.ID), 10)} 
            hx-target="this" 
            hx-trigger="change"
            class="ingredient-amount">
         of { ingredient.FoodToUse.Description }
        <button hx-post={"/delete-ingredient?id=" + strconv.FormatInt(int64(ingredient.ID), 10)} 
            hx-target="closest li" 
            hx-swap="delete">Delete</button>
    </li>
}

templ RecipeDisplay(recipe models.Recipe, nutMap map[string]models.Nutrient) {
    <div class="recipe">
        <input type="text" value={ recipe.Name } 
        name="recipe-name"
        hx-post={"/update-recipe-name?id=" + strconv.FormatInt(int64(recipe.ID), 10)} hx-target="this" 
        hx-trigger="change">
        <h3>Ingredients:</h3>
        <ul id="ingredients-list">
        for _, ingredient := range recipe.Ingredients {
            @IngredientDisplay(ingredient)
        }
        </ul>
        @FoodSearchBar("/add-ingredient?recipe_id=" + strconv.FormatInt(int64(recipe.ID), 10), 
        "#ingredients-list", "beforeend", "Add Ingredient")
        <br>
        <details>
            <summary>Nutrition</summary>
            {{
                nutAmounts := make(map[int64]unit.Mass, len(nutMap))

                for _, ingredient := range recipe.Ingredients {
                    for _, nut := range ingredient.FoodToUse.Nutrients {
                        //fmt.Printf("Ingredient: %s, Nutrient: %s, Amount: %f, Amount of ingredient: %f\n", 
                        //    ingredient.FoodToUse.Description, nut.Nutrient.Name, nut.Amount, ingredient.AmountG)
                        nutAmounts[nut.Nutrient.ID] += ingredient.Amount * nut.Amount
                    }
                }
            }}

            @NutritionDisplay(nutMap, nutAmounts)
        </details>
        <button hx-post={"/delete-recipe?id=" + strconv.FormatInt(int64(recipe.ID), 10)} hx-target="this" hx-swap="delete">Delete Recipe</button>
    </div>
}

templ PersonEditor(person models.Person) {
    <div class="person-editor">
        <h3>Personal Information</h3>
        <form hx-post="/update-person" hx-target="this" hx-swap="outerHTML">
            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" id="name" name="name" value={ person.Name } required>
                <label for="age">Age:</label>
                <input type="number" id="age" name="age" value={ strconv.FormatUint(uint64(person.Age), 10) } min="0" max="120">
                <label for="is_male">Gender:</label>
                <select id="is_male" name="is_male">
                    <option value="true" selected?={ person.IsMale }>Male</option>
                    <option value="false" selected?={ !person.IsMale }>Female</option>
                </select>
            </div>
            <div class="form-group">
                <label for="height">Height (cm):</label>
                <input type="number" id="height" name="height" value={ strconv.FormatFloat(float64(person.Height / unit.Centi), 'f', 1, 64) } step="0.1" min="0" max="300">
                <label for="weight">Weight (kg):</label>
                <input type="number" id="weight" name="weight" value={ strconv.FormatFloat(float64(person.Weight), 'f', 1, 64) } step="0.1" min="0" max="500">
            </div>
            <div class="form-group">
                <label for="body_fat_percent">Body Fat %:</label>
                <input type="number" id="body_fat_percent" name="body_fat_percent" value={ strconv.FormatFloat(float64(person.BodyFatPercent), 'f', 1, 32) } step="0.1" min="0" max="100">
                <label for="target_body_fat_percent">Target Body Fat %:</label>
                <input type="number" id="target_body_fat_percent" name="target_body_fat_percent" value={ strconv.FormatFloat(float64(person.TargetBodyFatPercent), 'f', 1, 32) } step="0.1" min="0" max="100">
            </div>
            <button type="submit">Update Person</button>
        </form>
        <h4>Base Metabolic Rate (METs): {strconv.FormatFloat(calcBMR(person), 'f', 2, 64)}</h4>
    </div>
}

templ Exercise(exercise models.Exercise, person models.Person) {
    <li class="exercise">
    <form hx-post={"/update-exercise?id=" + strconv.FormatUint(uint64(exercise.ID), 10)} hx-target="this" hx-swap="outerHTML">
        <div class="form-group">
        <input type="text" value={ exercise.Name } 
        name="exercise-name"
        hx-post={"/update-exercise?id=" + strconv.FormatUint(uint64(exercise.ID), 10)} hx-target="this" 
        hx-trigger="change">
        <input type="number" value={ strconv.FormatFloat(float64(exercise.METS), 'f', 2, 64) } 
        name="exercise-mets"
        hx-post={"/update-exercise?id=" + strconv.FormatUint(uint64(exercise.ID), 10)} hx-target="this" 
        hx-trigger="change">
        <p>Calorie estimate: {strconv.FormatFloat(calcBMR(person) / 24 * float64(exercise.METS), 'f', 2, 64)}</p>
        <button type="submit">Update</button>
        </div>
    </form>
    </li>
}

templ ExerciseDisplay(exercises []models.Exercise, person models.Person) {
    <ul>
        for _, exercise := range exercises {
            @Exercise(exercise, person)
        }
    </ul>
}

templ NutRow(displayName string, nut models.Nutrient, amount unit.Mass) {
    <tr>
        <td>{displayName}</td>
        <td>{models.FormatMass(amount)}</td>
        if nut.DailyValue > 0 {
            <td>{models.FormatMass(nut.DailyValue)}</td>
            <td>{ strconv.FormatFloat(float64(amount) / float64(nut.DailyValue) * 100, 'f', 2, 64) }%</td>
        } else {
            <td></td>
            <td></td>
        }
    </tr>
}

templ NutCategory(name string, displayNames []string, nuts []models.Nutrient, nutAmounts map[int64]unit.Mass) {
        <details>
            <summary>{name}</summary>
            <table>
                <thead>
                    <tr>
                        <th>Nutrient</th>
                        <th>Amount</th>
                        <th>Daily Value</th>
                        <th>Daily Value %</th>
                    </tr>
                </thead>
                <tbody>
                    for i, nut := range nuts {
                        @NutRow(displayNames[i], nut, nutAmounts[nut.ID])
                    }
                </tbody>
            </table>
        </details>
}



templ ProteinRow(person models.Person, nut models.Nutrient, amount unit.Mass) {
    <tr>
        <td>{nut.Name}</td>
        <td>{models.FormatMass(amount)}</td>
        {{ dv := person.Weight.Unit().Value() * nut.DailyValue.Unit().Value() * 1000 }}
        <td>{strconv.FormatFloat(dv, 'f', 2, 64)} g</td>
        <td>{ strconv.FormatFloat(float64(amount) / dv * 100 * 1000, 'f', 2, 64) }%</td>
    </tr>
}

templ ProteinDisplay(person models.Person, nutmap map[string]models.Nutrient, nutAmounts map[int64]unit.Mass) {
    <div class="protein-category">
        <details>
            <summary>Protein</summary>
            <p>Total: { models.FormatMass(nutAmounts[nutmap["Protein"].ID]) }</p>
            <p>Daily Value: { strconv.FormatFloat(float64(person.Weight) *  1.5432361, 'f', 2, 64) }</p>
            <p>Daily Value %: { strconv.FormatFloat(float64(person.Weight) *  1.5432361 / float64(nutAmounts[nutmap["Protein"].ID]), 'f', 2, 64) }</p>
            <table>
                <thead>
                    <tr>
                        <th>Amino Acid</th>
                        <th>Amount</th>
                        <th>Daily Value</th>
                        <th>Daily Value %</th>
                    </tr>
                </thead>
                <tbody>
                <p>Note: some foods in the USDA database do not have individual EAAs listed</p>
                    @ProteinRow(person, nutmap["Leucine"], nutAmounts[nutmap["Leucine"].ID])
                    @ProteinRow(person, nutmap["Tryptophan"], nutAmounts[nutmap["Tryptophan"].ID])
                    @ProteinRow(person, nutmap["Histidine"], nutAmounts[nutmap["Histidine"].ID])
                    @ProteinRow(person, nutmap["Lysine"], nutAmounts[nutmap["Lysine"].ID])
                    @ProteinRow(person, nutmap["Isoleucine"], nutAmounts[nutmap["Isoleucine"].ID])
                    @ProteinRow(person, nutmap["Threonine"], nutAmounts[nutmap["Threonine"].ID])
                    @ProteinRow(person, nutmap["Methionine"], nutAmounts[nutmap["Methionine"].ID])
                    @ProteinRow(person, nutmap["Phenylalanine"], nutAmounts[nutmap["Phenylalanine"].ID])
                    @ProteinRow(person, nutmap["Valine"], nutAmounts[nutmap["Valine"].ID])
                </tbody>
            </table>
        </details>
    </div>
}

templ DietDayEdit(dietDay models.DietDay, recipes []models.Recipe, 
                allexercises []models.Exercise, person models.Person,
                nutmap map[string]models.Nutrient) {
    {{
        totalHours := 0.0
        totalCalories := 0.0
        bmr := calcBMR(person)
    }}
    <div class="diet-day-edit">
        <h3>{ dietDay.Name }</h3>
        <form hx-post={"/update-diet-day?id=" + strconv.FormatUint(uint64(dietDay.ID), 10)} hx-target="this" hx-swap="outerHTML">
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" value={ dietDay.Name } required>
            <label for="meals">Meals:</label>
            <ul id="meals-list">
                for _, meal := range dietDay.Meals {
                    <li>{ meal.Name }</li>
                }
            </ul>
            <select id="new-meal" name="new-meal">
                <option value="-1"></option>
                for _, recipe := range recipes {
                    <option value={ strconv.FormatInt(recipe.ID, 10) }>{ recipe.Name }</option>
                }
            </select>
            <label for="foods">Foods:</label>
            <select id="foods" name="foods">
                for _, food := range dietDay.Foods {
                    <option value={ strconv.FormatInt(food.ID, 10) }>{ food.Description }</option>
                }
            </select>
            <label for="exercises">Exercises:</label>
            <table>
                <thead>
                    <tr>
                        <th>Exercise</th>
                        <th>Hours</th>
                        <th>Calories</th>
                    </tr>
                </thead>
                for i, exercise := range dietDay.Exercises {
                    <tr>
                        <td>{ exercise.Name }</td>
                        <td>{ strconv.FormatFloat(float64(dietDay.Durations[i]), 'f', 2, 64) }</td>
                        {{totalHours += dietDay.Durations[i]}}
                        <td>{ strconv.FormatFloat(float64(exercise.METS) * bmr / 24, 'f', 2, 64) }</td>
                        {{totalCalories += float64(exercise.METS) * bmr / 24}}
                    </tr>
                }
                <tr>
                    <td>Total Activity</td>
                    <td>{ strconv.FormatFloat(totalHours, 'f', 2, 64) }</td>
                    <td>{ strconv.FormatFloat(totalCalories, 'f', 2, 64) }</td>
                </tr>
                <tr>
                    <td>Total Including BMR</td>
                    <td>24</td>
                    <td>{ strconv.FormatFloat(totalCalories + (24 - totalHours) * bmr / 24, 'f', 2, 64) }</td>
                </tr>
            </table>
            <div class="form-group">
                <label for="duration">Hours:</label>
                <input type="number" id="duration" name="duration" value="0" step="0.1" min="0" max="100">
                <label for="new-exercise">Exercise:</label>
                <select id="new-exercise" name="new-exercise">
                    <option value="-1"></option>
                    for _, exercise := range allexercises {
                        <option value={ strconv.FormatInt(exercise.ID, 10) }>{ exercise.Name }</option>
                    }
                </select>
            </div>
            <button type="submit">Update</button>
        </form>
        <h3>Daily Nutrition</h3>
        {{
            nutAmounts := make(map[int64]unit.Mass, len(nutmap))
            var caloriesIngested unit.Mass

            for _, meal := range dietDay.Meals {
                for _, ingredient := range meal.Ingredients {
                    for _, nut := range ingredient.FoodToUse.Nutrients {
                        //fmt.Printf("%s\n", nut.Nutrient.Name)
                        if nut.ID == 80 {
                            fmt.Printf("Energy: %f, Ingredient: %f, Ingredient Amount: %f\n", 
                                nut.Amount, ingredient.FoodToUse.Description, ingredient.Amount)
                        }
                        nutAmounts[nut.Nutrient.ID] += ingredient.Amount * nut.Amount  * 10

                        if nut.Nutrient.Name == "Energy" {
                            //nutrients in usda database are recorded per 100 grams, but ingredient.Amount = 1 only when there's 1 kg
                            caloriesIngested += ingredient.Amount * nut.Amount * 10
                        }
                    }
                }
            }
        }}
        <p>Calories ingested: { strconv.FormatFloat(float64(caloriesIngested), 'f', 2, 64) }</p>
        <p>Net Calories: {strconv.FormatFloat(float64(caloriesIngested) - (totalCalories + (24 - totalHours) * bmr / 24), 'f', 2, 64)}</p>
        <div class="fat-category">
            @NutCategory("Fats",
                []string{"Total Fat", 
                    "Saturated Fat", 
                    "Trans Fat", 
                    "Mono Unsaturated Fat", 
                    "Poly Unsaturated Fat", 
                    "Linoleic Acid (omega-6)", 
                    "α-Linolenic acid (ALA, omega-3)", 
                    "Eicosapentaenoic acid (EPA, omega-3)", 
                    "Docosahexaenoic acid (DHA, omega-3)",
                    "Cholesterol",
                },
                []models.Nutrient{nutmap["Total lipid (fat)"],
                    nutmap["Fatty acids, total saturated"],
                    nutmap["Fatty acids, total trans"],
                    nutmap["Fatty acids, total monounsaturated"],
                    nutmap["Fatty acids, total polyunsaturated"],
                    nutmap["PUFA 18:2 n-6 c,c"],
                    nutmap["PUFA 18:3 n-3 c,c,c (ALA)"],
                    nutmap["PUFA 20:5 n-3 (EPA)"],
                    nutmap["PUFA 22:6 n-3 (DHA)"],
                    nutmap["Cholesterol"] },
                nutAmounts)
        </div>
        <div class="electrolyte-category">
            @NutCategory("Electrolytes",
                []string{"Sodium",
                "Potassium",
                "Chloride",
                "Calcium",
                "Magnesium",
                "Phosphorus",
                "Sulfate",
                "Iron",
                "Zinc",
                "Copper",
                "Manganese",
                "Cobalt",
                "Nickel",
                "Molybdenum",
                "Selenium",
                "Chromium",
                "Molybdenum",
                "Iodine",
                "Cadmium",
                "Nickel"},
                []models.Nutrient{nutmap["Sodium, Na"],
                nutmap["Potassium, K"],
                nutmap["Chloride, Cl"],
                nutmap["Calcium, Ca"],
                nutmap["Magnesium, Mg"],
                nutmap["Phosphorus, P"],
                nutmap["Sulfate, SO4"],
                nutmap["Iron, Fe"],
                nutmap["Zinc, Zn"],
                nutmap["Copper, Cu"],
                nutmap["Manganese, Mn"],
                nutmap["Cobalt, Co"],
                nutmap["Nickel, Ni"],
                nutmap["Molybdenum, Mo"],
                nutmap["Selenium, Se"],
                nutmap["Chromium, Cr"],
                nutmap["Molybdenum, Mo"],
                nutmap["Iodine, I"],
                nutmap["Cadmium, Cd"],
                nutmap["Nickel, Ni"]},
                nutAmounts)
        </div>
        <div class="vitamin-category">
            @NutCategory("Vitamins",
                []string{"Vitamin A",
                    "Thiamin",
                    "Riboflavin",
                    "Niacin",
                    "Pantothenic Acid (Vitamin B5)",
                    "Vitamin B6",
                    "Biotin",
                    "Folate",
                    "Vitamin B12",
                    "Vitamin C",
                    "Vitamin D",
                    "Vitamin E",
                    "Vitamin K"},
                []models.Nutrient{nutmap["Vitamin A, RAE"],
                    nutmap["Thiamin"],
                    nutmap["Riboflavin"],
                    nutmap["Niacin"],
                    nutmap["Pantothenic acid"],
                    nutmap["Vitamin B-6"],
                    nutmap["Biotin"],
                    nutmap["Folate, total"],
                    nutmap["Vitamin B-12"],
                    nutmap["Vitamin C, total ascorbic acid"],
                    nutmap["Vitamin D (D2 + D3)"],
                    nutmap["Vitamin E (alpha-tocopherol)"],
                    nutmap["Vitamin K, (Dihydrophylloquinone)"]},
                nutAmounts)
        </div>
        <div class="minerals-category">
            @NutCategory("Minerals",
                []string{"Calcium",
                    "Magnesium",
                    "Phosphorus",
                    "Zinc",
                    "Copper",
                    "Manganese",
                    "Cobalt",
                    "Nickel",
                    "Molybdenum",
                    "Selenium",
                    "Chromium",
                    "Molybdenum",
                    "Iodine",
                    "Cadmium",
                    "Nickel"},
                []models.Nutrient{nutmap["Calcium, Ca"],
                    nutmap["Magnesium, Mg"],
                    nutmap["Phosphorus, P"],
                    nutmap["Zinc, Zn"],
                    nutmap["Copper, Cu"],
                    nutmap["Manganese, Mn"],
                    nutmap["Cobalt, Co"],
                    nutmap["Nickel, Ni"],
                    nutmap["Molybdenum, Mo"],
                    nutmap["Selenium, Se"],
                    nutmap["Chromium, Cr"],
                    nutmap["Molybdenum, Mo"],
                    nutmap["Iodine, I"],
                    nutmap["Cadmium, Cd"],
                    nutmap["Nickel, Ni"]},
                nutAmounts)
        </div>
        @ProteinDisplay(person, nutmap, nutAmounts)
    </div>
}

templ DietDayDisplay(dietDays []models.DietDay, recipes []models.Recipe, 
                allexercises []models.Exercise, person models.Person,
                nutmap map[string]models.Nutrient) {
    <ul>
        for _, dietDay := range dietDays {
            @DietDayEdit(dietDay, recipes, allexercises, person, nutmap)
        }
    </ul>
    <form hx-post="/add-diet-day" hx-target="this" hx-swap="beforebegin">
        <div class="form-group">
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" required>
            <button type="submit">Add Diet Day</button>
        </div>
    </form>
}

templ Diet(dbloaded bool, recipes []models.Recipe, 
    nutrients []models.Nutrient, person models.Person, 
    dietDays []models.DietDay, allexercises []models.Exercise) {
    {{
        nutMap := make(map[string]models.Nutrient, len(nutrients))
        for _, nut := range nutrients {
            nutMap[nut.Name] = nut
        }
    }}
    <html>
    <head>
        <title>Diet</title>
        <script src="https://unpkg.com/htmx.org@2.0.4" integrity="sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+" crossorigin="anonymous"></script>
        <link rel="stylesheet" href={ stylesheet }>
        <style>
            .ingredient-inline {
                display: flex;
                align-items: center;
                gap: 0.5em; /* optional: adds space between elements */
            }
            .ingredient-amount {
                width: auto;
                min-width: 2em;
                max-width: 5em;
                text-align: right;
                padding: 2px 4px;
                box-sizing: content-box;
            }
            table {
                width: 100%;
                border-collapse: collapse;
            }
            .form-group {
                display: flex;
                align-items: center;
                gap: 10px;
            }
            .form-group label {
                margin-right: 5px;
            }
            .form-group input, .form-group select {
                width: 160px; /* Adjust the width as needed */
                padding: 5px;
            }
            .nut-deficient {
                color: red;
            }
        </style>
    </head>
    <body>
        @Nav()
        <h1>Diet</h1>
        <p>Welcome to the diet page!</p>
        if dbloaded {
            @PersonEditor(person)
            <h2>Exercise Reference</h2>
            @ExerciseDisplay(allexercises, person)
            @DietDayDisplay(dietDays, recipes, allexercises, person, nutMap)
            
            <h2>Recipes</h2>
            <div id="recipes-list">
            for _, recipe := range recipes {
                @RecipeDisplay(recipe, nutMap)
            }
            </div>
            <form hx-post="/add-recipe" hx-target="#recipes-list">
                <input type="text" name="recipe-name" placeholder="Recipe Name" required>
                <button type="submit">Add Recipe</button>
            </form>
        } else {
            <button hx-post="/transform-nut">Load data from USDA database</button>
        }
    </body>
    </html>
}