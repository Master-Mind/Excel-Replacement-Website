package templs

import (
    "strconv"
	"gonum.org/v1/gonum/unit"
    "github.com/Master-Mind/Excel-Replacement-Website/models"
)

templ FoodRecList(foodRecs []string) {
    <datalist id="food-recomendations">
        for _, food := range foodRecs {
            <option value={ food }></option>
        }
    </datalist>
}

templ FoodSearchBar(submission_endpoint string, swap_target string, swap string, button_text string) {
    <form hx-post={submission_endpoint} hx-target={swap_target} hx-swap={swap}>
        <label for="food-search">Search for food:</label>
        <input type="search" 
            id="food-search" 
            name="food-search" 
            list="food-recomendations" 
            placeholder="Enter food name..."
            hx-post="/recommend-food"
            hx-target="#food-recomendations"
            hx-trigger="keyup changed delay:100ms">
        <button type="submit">{button_text}</button>
    </form>
    @FoodRecList([]string{})
}

templ IngredientDisplay(ingredient models.Ingredient) {
    <li class="ingredient-inline">
        <input type="text" value={ models.FormatMass(ingredient.Amount) } 
            name="ingredient-amount" 
            hx-post={"/update-ingredient-amount?id=" + strconv.FormatInt(int64(ingredient.ID), 10)} 
            hx-target="this" 
            hx-trigger="change"
            class="ingredient-amount">
         of { ingredient.FoodToUse.Description }
        <button hx-post={"/delete-ingredient?id=" + strconv.FormatInt(int64(ingredient.ID), 10)} 
            hx-target="closest li" 
            hx-swap="delete">Delete</button>
    </li>
}

templ RecipeDisplay(recipe models.Recipe, nutrients []models.Nutrient) {
    <div class="recipe">
        <input type="text" value={ recipe.Name } 
        name="recipe-name"
        hx-post={"/update-recipe-name?id=" + strconv.FormatInt(int64(recipe.ID), 10)} hx-target="this" 
        hx-trigger="change">
        <h3>Ingredients:</h3>
        <ul id="ingredients-list">
        for _, ingredient := range recipe.Ingredients {
            @IngredientDisplay(ingredient)
        }
        </ul>
        @FoodSearchBar("/add-ingredient?recipe_id=" + strconv.FormatInt(int64(recipe.ID), 10), 
        "#ingredients-list", "beforeend", "Add Ingredient")
        <br>
        <details>
            <summary>Nutrition</summary>
            {{
                nutAmounts := make(map[int64]unit.Mass, len(nutrients))

                for _, ingredient := range recipe.Ingredients {
                    for _, nut := range ingredient.FoodToUse.Nutrients {
                        //fmt.Printf("Ingredient: %s, Nutrient: %s, Amount: %f, Amount of ingredient: %f\n", 
                        //    ingredient.FoodToUse.Description, nut.Nutrient.Name, nut.Amount, ingredient.AmountG)
                        nutAmounts[nut.Nutrient.ID] += ingredient.Amount * nut.Amount
                    }
                }
            }}

            <table>
                <thead>
                    <tr>
                        <th>Nutrient</th>
                        <th>Amount</th>
                    </tr>
                </thead>
                <tbody>
                for _, nut := range nutrients {
                    if nutAmounts[nut.ID] > 0.0 {
                        <tr>
                            <td>{ nut.Name }</td>
                            <td>{ models.FormatMass(nutAmounts[nut.ID]) }</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </details>
        <button hx-post={"/delete-recipe?id=" + strconv.FormatInt(int64(recipe.ID), 10)} hx-target="this" hx-swap="delete">Delete Recipe</button>
    </div>
}

templ Diet(dbloaded bool, recipes []models.Recipe, nutrients []models.Nutrient) {
    <html>
    <head>
        <title>Diet</title>
        <script src="https://unpkg.com/htmx.org@2.0.4" integrity="sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+" crossorigin="anonymous"></script>
        <link rel="stylesheet" href={ stylesheet }>
        <style>
            .ingredient-inline {
                display: flex;
                align-items: center;
                gap: 0.5em; /* optional: adds space between elements */
            }
            .ingredient-amount {
                width: auto;
                min-width: 2em;
                max-width: 5em;
                text-align: right;
                padding: 2px 4px;
                box-sizing: content-box;
            }
        </style>
    </head>
    <body>
        @Nav()
        <h1>Diet</h1>
        <p>Welcome to the diet page!</p>
        if dbloaded {
            <h2>Recipes</h2>
            <div id="recipes-list">
            for _, recipe := range recipes {
                @RecipeDisplay(recipe, nutrients)
            }
            </div>
            <form hx-post="/add-recipe" hx-target="#recipes-list">
                <input type="text" name="recipe-name" placeholder="Recipe Name" required>
                <button type="submit">Add Recipe</button>
            </form>
        } else {
            <button hx-post="/transform-nut">Load data from USDA database</button>
        }
    </body>
    </html>
}